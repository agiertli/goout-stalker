apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: goout-stalker-template
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: goout-backend
    labels:
      app: goout-backend    
  spec:
    lookupPolicy:
      local: false
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    name: goout-client
    labels:
      app: goout-client
  spec:
    lookupPolicy:
      local: false 
- apiVersion: v1
  kind: Secret
  metadata:
    name: mongodb
  stringData:
    database-admin-password: ${DATABASE_ADMIN_PASSWORD}
    database-password: ${DATABASE_PASSWORD}
    database-user: ${DATABASE_USER}  
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: goout-backend
    name: goout-backend
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: goout-backend:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: goout-stalker-backend
      git:
        uri: https://github.com/agiertli/goout-stalker.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.4
          namespace: openshift
        incremental: true
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: ${SECRET}
      type: GitHub
    - generic:
        secret: ${SECRET}
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    labels:
      app: goout-client
    name: goout-client
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: goout-client:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: goout-stalker-client/clientsite
      git:
        uri: https://github.com/agiertli/goout-stalker.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nginx:1.12
          namespace: openshift
      type: Source
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: ${SECRET}
      type: GitHub
    - generic:
        secret: ${SECRET}
      type: Generic
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: goout-backend
    name: goout-backend
  spec:
    replicas: 1
    selector:
      app: goout-backend
      deploymentconfig: goout-backend
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: goout-backend
          deploymentconfig: goout-backend
      spec:
        containers:
        - env:
          - name: DB_HOST
            value: ${DATABASE_SERVICE_NAME}
          - name: INIT_ARTIST_LIST
            value: ${INIT_ARTIST_LIST}
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: mongodb
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: mongodb
          - name: JAVA_OPTS_APPEND
            value: -Dfile.encoding=UTF-8
          imagePullPolicy: Always
          name: goout-backend
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          - containerPort: 8778
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - goout-backend
        from:
          kind: ImageStreamTag
          name: goout-backend:latest
          namespace: goout-stalker
      type: ImageChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    generation: 2
    labels:
      app: goout-client
    name: goout-client
  spec:
    replicas: 1
    selector:
      app: goout-client
      deploymentconfig: goout-client
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: goout-client
          deploymentconfig: goout-client
      spec:
        containers:
        - env:
          - name: BACKEND_HOSTNAME
            value: ${BACKEND_HOSTNAME}
          imagePullPolicy: Always
          name: goout-client
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - goout-client
        from:
          kind: ImageStreamTag
          name: goout-client:latest
      type: ImageChange
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    generation: 2
    labels:
      app: mongodb
      template: mongodb-persistent-template
    name: mongodb
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: mongodb
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: mongodb
          name: mongodb
      spec:
        containers:
        - env:
          - name: MONGODB_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: mongodb
          - name: MONGODB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: mongodb
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-admin-password
                name: mongodb
          - name: MONGODB_DATABASE
            value: ${DATABASE_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: mongodb
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mongodb
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: goout-backend
    name: goout-backend
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    - name: 8778-tcp
      port: 8778
      protocol: TCP
      targetPort: 8778
    selector:
      app: goout-backend
      deploymentconfig: goout-backend
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: goout-client
    name: goout-client
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    selector:
      app: goout-client
      deploymentconfig: goout-client
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      template.openshift.io/expose-uri: mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}
    labels:
      app: mongodb
      template: mongodb-persistent-template
    name: mongodb
  spec:
    ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      name: mongodb
    sessionAffinity: None
    type: ClusterIP
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
    labels:
      app: goout-client
    name: goout-client
  spec:
    host: ${CLIENT_HOSTNAME}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: goout-client
      weight: 100
    wildcardPolicy: None
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
    labels:
      app: goout-backend
    name: goout-backend
  spec:
    host: ${BACKEND_HOSTNAME}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: goout-backend
      weight: 100
    wildcardPolicy: None    
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    labels:
      app: mongodb
      template: mongodb-persistent-template
    name: mongodb
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Gi
parameters:
- name: BACKEND_HOSTNAME
  displayName: goout-backend hostname
  description: FQDN of the route to access the backend API
  required: true
- name: CLIENT_HOSTNAME
  displayName: Client Application Hostname
  description: FQDN of the route to access the application frontend
  required: true
- name: SECRET
  displayName: Webhook Secret
  description: Secret for webhooks
  generate: expression
  from: '[a-zA-Z0-9]{40}'
- description: Password for the database admin user.
  displayName: Database Administrator Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_ADMIN_PASSWORD
- description: Password for the MongoDB user.
  displayName: MongoDB Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD
- description: Username for MongoDB user that will be used for accessing the database.
  displayName: MongoDB Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: DATABASE_USER
- displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mongodb
- displayName: Database Name
  name: DATABASE_NAME
  required: true
  value: goout-minishift
- displayName: List of the initial artists
  name: INIT_ARTIST_LIST
  required: false